//webpack (snowpack, vite, ...) webpack responsavel pelo CreateReactApp
// ele entende as importações percebe importações além de códigos javaScript
// pega a extensão dos arquivos para ser entendido dentro do javascript
// exemplo import illustration from '../assets/images/illustration.svg'




CREATE REACT APP: RESPONSÁVEL POR QUAISQUER TIPO DE IMPORTAÇÃO: SEJA UM ARQUIVO CSS, IMG, SVG, ETC... TRÁS TAMBÉM A POSSIBILIDADE DE USAR SAAS QUE É UM PRE-PROCESSADOR CSS QUE PERMITE O CSS TER FUNCIONALIDADES A MAIS.

PRA UTILIZAR O SASS INSTALE ATRAVÉS DO TERMINAL USANDO:
 yarn add node-sass@^5.0.0
 LEMBRANDO QUE A INSTALAÇÃO DEVE SER FEITA DE ACORDO COM O CREATEREACTAPP PERMITE. POR FIM ALTERE O ARQUIVO .css para .scss
 -x---------------------x---------------x---------------------


 ROTEAMENTO REACT-ROUTER-DOM:

 ENVOLVA TODA AS PAGES DENTRO DO APP NO:
<BrowserRouter>
<Router path="/" component={Home} />
<Router path="/" component={NewRoom} />
 </BrowserRouter>
LEMBRANDO QUE SÃO OS COMPONENTS QUE ESTÃO SENDO IMPORTADOS PARA O APP NO CASO AS PAGES
--x-----------------x---------------------

<Route path="/" exact component={Home} /> <<< endereço exatamente com barra/
se não o Route ler que o endereço começa no /
NÃO COLOCANDO EXACT NA HOME AS OUTRAS PÁGINAS PODEM NÃO SER ACESSADAS DE ACORDO COM SEUS ENDEREÇOS.
---------------------------x----------------------x-----------------------------
SOBRE HOOKS:
Toda função que começa com "use" ex: useHistory.. useEffect.. etc... precisa estar dentro do component nesse na função do component. caso contrário não funcionará o HOOK ("use" praticamente são HOOKS).
---x-------------------------------------x---------------------x-----------

CONTEXTOS: São formas de compartilhar informações entre dois ou mais Componentes.
-----------------------x--------------------x---------------------------------

AULA 02: A PARTIR DE 50MINUTOS mais ou menos ensina sobre createContext useContext etc...

-  <TestContext.Provider value={{value, setValue}}> <<<<<<< O PRIMEIRO COLCHETES SIGNIFICA QUE É UM CÓDIGO JAVASCRIPT, O SEGUNDO SIGNFICA QUE É UM OBJETO.

x--x-------x------x-----------------x---------------x-------------x-----x---x

 - Para ignorar o typeScript use: "as any" EXEMPLO:

export const TestContext = createContext({} as any)

function App() { 
const [value, setValue ] = useState('Tester') 

  return (
    
    <BrowserRouter>
    <TestContext.Provider value={{value, setValue}}>
   <Route path="/" exact component={Home} />
   <Route path="/rooms/new" component={NewRoom} />
   </TestContext.Provider>
    </BrowserRouter>
    
  );
}

Como o TestContext tem um value que referencia dois objetos, como alternativa devemos usar o as any para que o createContext consiga ler normalmente mesmo sendo mais de um objeto.

  <h1>{user?.name}</h1> <<<<<<<< COM INTERROGAÇÃO SIGNIFICA QUE EXISTE USUÁRIO OU UNDEFINED. // STOPPED 1:18:10 AULA 02
  ---------------------------------x--------------------x----------------------

  USEEFFECT: o useEffect() dispara uma função sempre que algo acontecer!

  Sintaxe: useEffect(() => {}, []) uma função e o segundo uma array, se passarmos sem array a função pode crashar! o Segundo parâmetro diz quando eu quero executar a função, no caso eu poderia estar monitorando EX:

const [value, setValue ] = useState('Tester') 

useEffect(() => {}, [value]) 

Toda vez que o value mudar eu ponho no Array do useEffect(), mas se EU QUISERA disparar a função uma ÚNICA VEZ, eu deixo o ARRAY VAZIO: useEffect(() => {}, [])


-----x---x---------- 
 - No USEEFFECT SEMPRE o segundo parâmetro será um array!


  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


